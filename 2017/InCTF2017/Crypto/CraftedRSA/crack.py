from Crypto.Util.number import *
import gmpy
import random
import gmpy2

# Fermats factorization code source:
# https://wiremask.eu/articles/fermats-prime-numbers-factorization/

def fermat_factor(n):
    assert n % 2 != 0

    a = gmpy2.isqrt(n)
    b2 = gmpy2.square(a) - n

    while not gmpy2.is_square(b2):
        a += 1
        b2 = gmpy2.square(a) - n

    p = a + gmpy2.isqrt(b2)
    q = a - gmpy2.isqrt(b2)

    return int(p), int(q)
n = 16597712262800095098226130512282927179497011173406539443409876664765634654792363184411825406484837021057998483611151825837103388795480529002121502546121948928066281359031028270878297218661409934035886546020930964028780335737680348596910306513206117504108058925329858396067856573163592825383960058578681644875980180546847557812966223271765120162910255137784213094212309609759257353674875979882725784871783757837297703281196379092511265281287845023919390729682379344606965288462358145824117145872183931465422694130609005144944508184194344888497580577863328136806345023037939204996365581479722451260520977982655414777159

c = 0x6444941f812bd69f57dd94579532e52230e0cb6c3990e6bed0f19950e30126afe92baf35db0ee64cc8d59443b2bff99574142bdab354400ea19ef309b37b946d18e4d003ab63c159cebd7f954867f7a82e1d44082d8d63e1fea874f3793ab56c28b2d66eb054edd3520bf60f70806d8c49e8f80200dd33943376042ee324d425c612b7ab7a52bd86b42e6f485ce19b83db156a6ea42ba8d90ca348f444887f230672bd90d673a36250476a5c3e1413fc09862007f4fee942dcf1ec45ae7fd04ab829bde3f3d3e1ee562a2c7ecfd98b345f87cfe1f6cff67c81c7d23c659cd29660376f4b64fa592dd17695124818e95ce8b09f4f24d9d9f05cf929237eac3dff

e = 2**16 +1

p,q = fermat_factor(n)


print "Found: ",p
print "Found: ",q


d = int(gmpy.invert(e,((p-1)*(q-1))))

print long_to_bytes(pow(c,d,n))
